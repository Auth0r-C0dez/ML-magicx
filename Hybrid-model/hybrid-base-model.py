# -*- coding: utf-8 -*-
"""Hybrid-model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-DVxPyKwGqNkIrWnI7SsWKv61favarn5
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

df= pd.read_csv('/content/drive/MyDrive/Class AML/Project/SENSEX_01012015_12092025-daily - SENSEX_01012015_12092025-daily.csv')

df.head()

df = df.drop('Date',axis=1)

df.head()

df.info()

df['Price_Direction'] = (df['Close'].shift(-1) > df['Close']).astype(int)

df.head()

df.tail()

df['Price_Direction'].value_counts()

df.info()

# --- This is the manual Random Forest class ---
class SimpleRandomForest0:
    """
    A simple Random Forest classifier implemented with NumPy and Scikit-Learn's Decision Tree.
    """
    def __init__(self, n_trees=10, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees = n_trees
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        self.n_features = n_features
        self.trees = []

    def _bootstrap_sample(self, X, y):
        """Creates a random sample of the data with replacement."""
        n_samples = X.shape[0]
        # Get random indices with replacement
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]

    def _most_common_label(self, y):
        """Finds the most common label in a list of predictions."""
        counter = Counter(y)
        most_common = counter.most_common(1)[0][0]
        return most_common

    def fit(self, X, y):
        """Trains the random forest by creating and training multiple decision trees."""
        self.trees = []
        for _ in range(self.n_trees):
            # Create a bootstrapped sample
            X_sample, y_sample = self._bootstrap_sample(X, y)

            # Create and train a single decision tree
            tree = DecisionTreeClassifier(
                max_depth=self.max_depth,
                min_samples_split=self.min_samples_split,
                max_features=self.n_features # Feature subsampling
            )
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)

    def predict(self, X):
        """Makes predictions by aggregating the predictions from all trees."""
        # Get predictions from each tree
        tree_preds = np.array([tree.predict(X) for tree in self.trees])
        # Transpose so each row is a sample and each column is a tree's prediction
        tree_preds = tree_preds.T # shape: [n_samples, n_trees]

        # For each sample, find the most common prediction (majority vote)
        y_pred = [self._most_common_label(preds) for preds in tree_preds]
        return np.array(y_pred)

# --- Data Preparation ---
# For this script to be runnable, create a dummy DataFrame.
data = {
    'Open': np.random.rand(200) * 20 + 150, 'High': np.random.rand(200) * 20 + 155,
    'Low': np.random.rand(200) * 20 + 145, 'Close': np.random.rand(200) * 20 + 150,
}
df = pd.DataFrame(data)
df['Price_Direction'] = (df['Close'].shift(-1) > df['Close']).astype(int)
df.dropna(inplace=True)

# 1. Define features (X) and target (y)
features = ['Open', 'High', 'Low', 'Close']
target = 'Price_Direction'
X = df[features].values
y = df[target].values

# 2. Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# --- Loop to Check Different Parameter Combinations ---

# 3. Define the grid of parameters to check
param_grid = {
    'n_trees': [5, 10, 20],
    'max_depth': [5, 10],
    'n_features': [2, 4] # Number of features to consider at each split
}

# 4. Variables to store the best results
best_accuracy = 0.0
best_params = {}

print("Starting Manual Random Forest Hyperparameter Search...")
print("-" * 65)

# 5. Loop through every combination of parameters
for n_t in param_grid['n_trees']:
    for m_depth in param_grid['max_depth']:
        for n_feat in param_grid['n_features']:

            # Initialize the model with current parameters
            rf = SimpleRandomForest0(n_trees=n_t, max_depth=m_depth, n_features=n_feat)

            # Train the model
            rf.fit(X_train, y_train)

            # Make predictions
            predictions = rf.predict(X_test)

            # Calculate accuracy
            accuracy = accuracy_score(y_test, predictions)

            # Print the results
            print(f"Trees: {n_t}, Depth: {m_depth}, Features: {n_feat} \t->\t Accuracy: {accuracy:.4f}")

            # Check if this is the best model so far
            if accuracy > best_accuracy:
                best_accuracy = accuracy
                best_params = {'n_trees': n_t, 'max_depth': m_depth, 'n_features': n_feat}

print("-" * 65)
print("Search complete.")
print(f"\nBest Accuracy Achieved: {best_accuracy:.4f}")
print(f"Best Parameters Found: {best_params}")

if best_params:
    print("\nRetraining the best model on the full training data and saving it...")

    # 1. Create a final model with the best parameters found
    final_model = SimpleRandomForest0(
        n_trees=best_params['n_trees'],
        max_depth=best_params['max_depth'],
        n_features=best_params['n_features']
    )

    # 2. Train it on the entire training set
    final_model.fit(X_train, y_train)

    # 3. Save the trained model to a file using pickle
    filename = '/content/drive/MyDrive/Class AML/Project/best_random_forest.pkl'
    with open(filename, 'wb') as file:
        pickle.dump(final_model, file)

    print(f"Model saved successfully as '{filename}'")
else:
    print("\nNo best model to save.")


df['Next_Close'] = df['Close'].shift(-1)

# The last row will have a NaN value, so we should drop it
df.dropna(inplace=True)

print("DataFrame with new target columns:")
print(df.head())

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score
import sys # Used to get a very large number for initialization

# --- This is the manual Random Forest Regressor class (Unchanged) ---
class SimpleRandomForestRegressor:
    """
    A simple Random Forest regressor implemented with NumPy and Scikit-Learn's Decision Tree.
    """
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees = n_trees
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        self.n_features = n_features
        self.trees = []

    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]

    def fit(self, X, y):
        self.trees = []
        if self.n_features is None:
            self.n_features = X.shape[1]

        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeRegressor(
                max_depth=self.max_depth,
                min_samples_split=self.min_samples_split,
                max_features=self.n_features,
                random_state=42
            )
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)

    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees])
        tree_preds = tree_preds.T
        y_pred = np.mean(tree_preds, axis=1)
        return y_pred

# --- Data Preparation ---
# Assume 'df' is your DataFrame with 'Next_Close' already created
# df = pd.read_csv('your_data.csv')

# 1. Define features (X) and the regression target (y)
features = ['Open', 'High', 'Low', 'Close']
X = df[features].values
y_reg = df['Next_Close'].values

# 2. Split data into training and testing sets
X_train, X_test, y_reg_train, y_reg_test = train_test_split(X, y_reg, test_size=0.2, random_state=42)

# --- Loop to Check Different Parameter Combinations ---

# 3. Define the grid of parameters you want to check
param_grid = {
    'n_trees': [10, 20, 50],
    'max_depth': [5, 10, 15],
    'n_features': [2, 3, 4] # Number of features to consider at each split
}

# 4. Variables to store the best results
# We want the lowest MSE, so we initialize best_mse to a very large number
best_mse = sys.float_info.max
best_params = {}
best_r2 = 0

print("Starting Random Forest Regressor Hyperparameter Search...")
print("-" * 75)
print(f"{'Trees':<10} {'Depth':<10} {'Features':<10} {'MSE':<20} {'R-squared':<20}")
print("-" * 75)

# 5. Loop through every combination of parameters in the grid
for n_t in param_grid['n_trees']:
    for m_depth in param_grid['max_depth']:
        for n_feat in param_grid['n_features']:

            # Initialize the model with the current set of parameters
            regressor = SimpleRandomForestRegressor(n_trees=n_t, max_depth=m_depth, n_features=n_feat)

            # Train the model
            regressor.fit(X_train, y_reg_train)

            # Make predictions
            predictions = regressor.predict(X_test)

            # Calculate the evaluation metrics
            mse = mean_squared_error(y_reg_test, predictions)
            r2 = r2_score(y_reg_test, predictions)

            # Print the results for this combination
            print(f"{n_t:<10} {m_depth:<10} {n_feat:<10} {mse:<20.2f} {r2:<20.4f}")

            # Check if this model is better than the best one found so far
            if mse < best_mse:
                best_mse = mse
                best_r2 = r2
                best_params = {'n_trees': n_t, 'max_depth': m_depth, 'n_features': n_feat}

print("-" * 75)
print("Search complete.")
print(f"\nBest MSE Achieved: {best_mse:.2f}")
print(f"R-squared at Best MSE: {best_r2:.4f}")
print(f"Best Parameters Found: {best_params}")

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score
import pickle

# --- This is the manual Random Forest Regressor class (Unchanged) ---
class SimpleRandomForestRegressor:
    """
    A simple Random Forest regressor implemented with NumPy and Scikit-Learn's Decision Tree.
    """
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees = n_trees
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        self.n_features = n_features
        self.trees = []

    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]

    def fit(self, X, y):
        self.trees = []
        if self.n_features is None:
            self.n_features = X.shape[1]

        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeRegressor(
                max_depth=self.max_depth,
                min_samples_split=self.min_samples_split,
                max_features=self.n_features,
                random_state=42
            )
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)

    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees])
        tree_preds = tree_preds.T
        y_pred = np.mean(tree_preds, axis=1)
        return y_pred

# --- Data Preparation ---
# Assume 'df' is your DataFrame with 'Next_Close' already created
# df = pd.read_csv('your_data.csv')

# 1. Define features (X) and the regression target (y)
features = ['Open', 'High', 'Low', 'Close']
X = df[features].values
y_reg = df['Next_Close'].values

# 2. Split data into training and testing sets
X_train, X_test, y_reg_train, y_reg_test = train_test_split(X, y_reg, test_size=0.2, random_state=42)

# --- Train and Evaluate the Final Model ---

# 3. Define the best parameters you found from the search
best_params = {
    'n_trees': 20,
    'max_depth': 10,
    'n_features': 2
}

print(f"Training final regressor with parameters: {best_params}")

# 4. Initialize the model with the best parameters
final_regressor = SimpleRandomForestRegressor(
    n_trees=best_params['n_trees'],
    max_depth=best_params['max_depth'],
    n_features=best_params['n_features']
)

# 5. Train the final model on the full training data
final_regressor.fit(X_train, y_reg_train)
print("Training complete.")

# 6. Make predictions and evaluate the final model
predictions = final_regressor.predict(X_test)
mse = mean_squared_error(y_reg_test, predictions)
r2 = r2_score(y_reg_test, predictions)

print("-" * 50)
print("Final Regression Model Evaluation:")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (R²): {r2:.4f}")
print("-" * 50)

# --- (Optional but Recommended) Save the Final Regressor Model ---
filename = '/content/drive/MyDrive/Class AML/Project/best_regressor_model.pkl'
with open(filename, 'wb') as file:
    pickle.dump(final_regressor, file)

print(f"Final regressor model saved as '{filename}'")

import pickle
import numpy as np
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
from collections import Counter

# --- IMPORTANT: The class definitions must be available to load the models ---

class SimpleRandomForest:
    """The classifier class definition."""
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees, self.max_depth, self.min_samples_split, self.n_features = n_trees, max_depth, min_samples_split, n_features
        self.trees = []
    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]
    def _most_common_label(self, y):
        return Counter(y).most_common(1)[0][0]
    def fit(self, X, y):
        self.trees = []
        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeClassifier(max_depth=self.max_depth, min_samples_split=self.min_samples_split, max_features=self.n_features)
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)
    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees]).T
        return np.array([self._most_common_label(preds) for preds in tree_preds])

class SimpleRandomForestRegressor:
    """The regressor class definition."""
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees, self.max_depth, self.min_samples_split, self.n_features = n_trees, max_depth, min_samples_split, n_features
        self.trees = []
    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]
    def fit(self, X, y):
        self.trees = []
        if self.n_features is None: self.n_features = X.shape[1]
        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeRegressor(max_depth=self.max_depth, min_samples_split=self.min_samples_split, max_features=self.n_features)
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)
    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees]).T
        return np.mean(tree_preds, axis=1)

# --- Load the saved models from their files ---

try:
    with open('/content/drive/MyDrive/Class AML/Project/best_random_forest.pkl', 'rb') as file:
        classifier_model = pickle.load(file)
    print("✅ Classifier model ('best_random_forest.pkl') loaded successfully.")

    with open('/content/drive/MyDrive/Class AML/Project/best_regressor_model.pkl', 'rb') as file:
        regressor_model = pickle.load(file)
    print("✅ Regressor model ('best_regressor_model.pkl') loaded successfully.")

except FileNotFoundError as e:
    print(f"❌ Error: Could not find a model file. Please ensure '{e.filename}' is in the same directory.")

import pandas as pd
from sklearn.model_selection import train_test_split

# --- Prepare the Test Data ---
# We need the original test set to make predictions on.
# This code should be identical to what was used during training.
# Let's recreate it to ensure this cell can run independently.

# Create a dummy DataFrame for the script to run
data = {
    'Open': np.random.rand(200) * 20 + 150, 'High': np.random.rand(200) * 20 + 155,
    'Low': np.random.rand(200) * 20 + 145, 'Close': np.random.rand(200) * 20 + 150,
}
df = pd.DataFrame(data)
df['Price_Direction'] = (df['Close'].shift(-1) > df['Close']).astype(int)
df['Next_Close'] = df['Close'].shift(-1)
df.dropna(inplace=True)

# Define features and both targets
features = ['Open', 'High', 'Low', 'Close']
X = df[features].values
y_clf = df['Price_Direction'].values
y_reg = df['Next_Close'].values

# Split data using the SAME random_state to get the original test set
X_train, X_test, y_clf_train, y_clf_test = train_test_split(X, y_clf, test_size=0.2, random_state=42)
_, _, y_reg_train, y_reg_test = train_test_split(X, y_reg, test_size=0.2, random_state=42)


# --- Apply the Hybrid Logic ---

# 1. Get the direction predictions from the classifier for the entire test set
direction_predictions = classifier_model.predict(X_test)

hybrid_predictions = []
# 2. Loop through each data point in the test set
for i in range(len(X_test)):
    # 3. If the classifier predicts the price will go UP...
    if direction_predictions[i] == 1:
        # ...ask the regressor to predict the price.
        # Note: we reshape X_test[i] because the model expects a 2D array
        price_prediction = regressor_model.predict(X_test[i].reshape(1, -1))
        hybrid_predictions.append(price_prediction[0])
    # 4. If the classifier predicts the price will go DOWN...
    else:
        # ...our strategy is to predict no change (current close price).
        # The 'Close' price is the 4th feature (index 3).
        current_close_price = X_test[i][3]
        hybrid_predictions.append(current_close_price)

# Convert the list of predictions to a NumPy array for easier calculations
hybrid_predictions = np.array(hybrid_predictions)

print("✅ Hybrid prediction logic applied successfully.")
print("\nFirst 5 hybrid predictions:")
print(hybrid_predictions[:5])

import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score

# --- Evaluate the hybrid predictions against the actual test values ---

hybrid_mse = mean_squared_error(y_reg_test, hybrid_predictions)
hybrid_r2 = r2_score(y_reg_test, hybrid_predictions)

print("-" * 50)
print("🏆 Hybrid Model Final Evaluation 🏆")
print(f"Mean Squared Error (MSE): {hybrid_mse:.2f}")
print(f"R-squared (R²): {hybrid_r2:.4f}")
print("-" * 50)


# --- Create the Comparison Graph ---

# Set the figure size for better readability
plt.figure(figsize=(15, 7))

# Plot the actual prices in blue
plt.plot(y_reg_test, label='Actual Prices', color='blue', marker='o', linestyle='-', markersize=4)

# Plot the hybrid model's predictions in red
plt.plot(hybrid_predictions, label='Hybrid Predictions', color='red', linestyle='--', marker='x', markersize=4)

# Add titles and labels for clarity
plt.title('Hybrid Model: Actual vs. Predicted Prices', fontsize=16)
plt.xlabel('Test Sample Index', fontsize=12)
plt.ylabel('Close Price', fontsize=12)
plt.legend()
plt.grid(True, linestyle='--', alpha=0.6)

# Show the plot
plt.show()

