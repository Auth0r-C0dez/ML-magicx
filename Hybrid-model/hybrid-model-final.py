# -*- coding: utf-8 -*-
"""Hybrid-model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-DVxPyKwGqNkIrWnI7SsWKv61favarn5
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

df= pd.read_csv('/content/drive/MyDrive/Class AML/Project/SENSEX_01012015_12092025-daily - SENSEX_01012015_12092025-daily.csv')

df.head()

df = df.drop('Date',axis=1)

df.head()

df.info()

df['Price_Direction'] = (df['Close'].shift(-1) > df['Close']).astype(int)

df.head()

df.tail()

df['Price_Direction'].value_counts()

df.info()

# import numpy as np
# from sklearn.model_selection import train_test_split
# from sklearn.preprocessing import StandardScaler
# from sklearn.metrics import accuracy_score

# class SimpleSVM:
#     """
#     A simple Support Vector Machine classifier implemented with NumPy.
#     """
#     def __init__(self, learning_rate=0.001, lambda_param=0.01, n_iters=1000):
#         self.lr = learning_rate
#         self.lambda_param = lambda_param
#         self.n_iters = n_iters
#         self.w = None  # Weights
#         self.b = None  # Bias

#     def fit(self, X, y):
#         """
#         Train the SVM model using gradient descent.

#         X: Training features
#         y: Target labels {0, 1}
#         """
#         n_samples, n_features = X.shape

#         # SVM math requires labels to be -1 and 1
#         y_ = np.where(y <= 0, -1, 1)

#         # Initialize parameters
#         self.w = np.zeros(n_features)
#         self.b = 0

#         # Gradient descent training loop
#         for _ in range(self.n_iters):
#             for idx, x_i in enumerate(X):
#                 # Check the condition for hinge loss
#                 condition = y_[idx] * (np.dot(x_i, self.w) - self.b) >= 1

#                 # Calculate gradients based on the condition
#                 if condition:
#                     # Gradient of the regularization term only
#                     dw = 2 * self.lambda_param * self.w
#                     db = 0
#                 else:
#                     # Gradient of both regularization and loss term
#                     dw = 2 * self.lambda_param * self.w - np.dot(x_i, y_[idx])
#                     db = y_[idx]

#                 # Update the weights and bias
#                 self.w -= self.lr * dw
#                 self.b -= self.lr * db

#     def predict(self, X):
#         """
#         Predict class labels for new data.
#         """
#         # Calculate the linear combination (decision boundary)
#         linear_output = np.dot(X, self.w) - self.b

#         # Get the sign of the output and convert back to {0, 1}
#         predictions = np.sign(linear_output)
#         return np.where(predictions == -1, 0, 1)

# # --- How to Use with Your Dataset ---

# # Assume 'df' is your DataFrame with columns ['Open', 'High', 'Low', 'Close', 'Price_Direction']

# # 1. Define features (X) and target (y)
# features = ['Open', 'High', 'Low', 'Close']
# target = 'Price_Direction'
# X = df[features].values
# y = df[target].values

# # 2. Split data into training and testing sets
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# # 3. Scale your features (CRITICAL STEP for SVM)
# scaler = StandardScaler()
# X_train_scaled = scaler.fit_transform(X_train)
# X_test_scaled = scaler.transform(X_test)

# # 4. Initialize and train your manual SVM
# svm = SimpleSVM(learning_rate=0.0001, n_iters=500) # Learning rate needs to be small
# svm.fit(X_train_scaled, y_train)

# # 5. Make predictions on the test set
# predictions = svm.predict(X_test_scaled)

# # 6. Evaluate the model
# accuracy = accuracy_score(y_test, predictions)
# print(f"Accuracy of the manual SVM: {accuracy:.2f}")

# param_grid = {
#     'learning_rate': [0.001, 0.0001, 0.00001],
#     'lambda_param': [0.01, 0.1, 1],
#     'n_iters': [500, 1000]
# }

# # 5. Variables to store the best results found
# best_accuracy = 0.0
# best_params = {}

# print("Starting Manual SVM Hyperparameter Search...")
# print("-" * 65)

# # 6. Loop through every combination of parameters in the grid
# for lr in param_grid['learning_rate']:
#     for l_param in param_grid['lambda_param']:
#         for iters in param_grid['n_iters']:

#             # Initialize the SimpleSVM model with the current set of parameters
#             svm = SimpleSVM(learning_rate=lr, lambda_param=l_param, n_iters=iters)

#             # Train the model
#             svm.fit(X_train_scaled, y_train)

#             # Make predictions on the test set
#             predictions = svm.predict(X_test_scaled)

#             # Calculate the accuracy
#             accuracy = accuracy_score(y_test, predictions)

#             # Print the parameters and their corresponding accuracy
#             print(f"LR: {lr}, Lambda: {l_param}, Iters: {iters} \t->\t Accuracy: {accuracy:.4f}")

#             # Check if this combination gave a better accuracy
#             if accuracy > best_accuracy:
#                 best_accuracy = accuracy
#                 best_params = {'learning_rate': lr, 'lambda_param': l_param, 'n_iters': iters}

# print("-" * 65)
# print("Search complete.")
# print(f"\nBest Accuracy Achieved: {best_accuracy:.4f}")
# print(f"Best Parameters Found: {best_params}")

# import numpy as np
# import pandas as pd
# from sklearn.model_selection import train_test_split
# from sklearn.preprocessing import StandardScaler
# from sklearn.metrics import accuracy_score

# # --- This is the manual Logistic Regression class ---
# class SimpleLogisticRegression:
#     """
#     A simple Logistic Regression classifier implemented with NumPy.
#     """
#     def __init__(self, learning_rate=0.001, n_iters=1000):
#         self.lr = learning_rate
#         self.n_iters = n_iters
#         self.weights = None
#         self.bias = None

#     def _sigmoid(self, z):
#         """Private helper function to compute the sigmoid"""
#         return 1 / (1 + np.exp(-z))

#     def fit(self, X, y):
#         """
#         Train the Logistic Regression model using gradient descent.
#         """
#         n_samples, n_features = X.shape

#         # Initialize parameters
#         self.weights = np.zeros(n_features)
#         self.bias = 0

#         # Gradient descent training loop
#         for _ in range(self.n_iters):
#             # Calculate linear model and apply sigmoid
#             linear_model = np.dot(X, self.weights) + self.bias
#             y_predicted = self._sigmoid(linear_model)

#             # Calculate gradients
#             dw = (1 / n_samples) * np.dot(X.T, (y_predicted - y))
#             db = (1 / n_samples) * np.sum(y_predicted - y)

#             # Update weights and bias
#             self.weights -= self.lr * dw
#             self.bias -= self.lr * db

#     def predict(self, X):
#         """
#         Predict class labels for new data.
#         """
#         linear_model = np.dot(X, self.weights) + self.bias
#         y_predicted_probs = self._sigmoid(linear_model)

#         # Classify based on a 0.5 threshold
#         y_predicted_cls = [1 if i > 0.5 else 0 for i in y_predicted_probs]
#         return np.array(y_predicted_cls)

# # --- Data Preparation ---
# # For this script to be runnable, let's create a dummy DataFrame.
# # In your code, you would load your actual data into 'df'.
# data = {
#     'Open': np.random.rand(200) * 20 + 150,
#     'High': np.random.rand(200) * 20 + 155,
#     'Low': np.random.rand(200) * 20 + 145,
#     'Close': np.random.rand(200) * 20 + 150,
# }
# df = pd.DataFrame(data)
# df['Price_Direction'] = (df['Close'].shift(-1) > df['Close']).astype(int)
# df.dropna(inplace=True)

# # 1. Define features (X) and target (y)
# features = ['Open', 'High', 'Low', 'Close']
# target = 'Price_Direction'
# X = df[features].values
# y = df[target].values

# # 2. Split data into training and testing sets
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# # 3. Scale your features (Important for gradient descent)
# scaler = StandardScaler()
# X_train_scaled = scaler.fit_transform(X_train)
# X_test_scaled = scaler.transform(X_test)

# # --- Loop to Check Different Parameter Combinations ---

# # 4. Define the grid of parameters to check
# param_grid = {
#     'learning_rate': [0.1, 0.01, 0.001],
#     'n_iters': [1000, 2000, 3000]
# }

# # 5. Variables to store the best results
# best_accuracy = 0.0
# best_params = {}

# print("Starting Manual Logistic Regression Hyperparameter Search...")
# print("-" * 65)

# # 6. Loop through every combination of parameters
# for lr in param_grid['learning_rate']:
#     for iters in param_grid['n_iters']:
#         # Initialize the model with current parameters
#         log_reg = SimpleLogisticRegression(learning_rate=lr, n_iters=iters)

#         # Train the model
#         log_reg.fit(X_train_scaled, y_train)

#         # Make predictions
#         predictions = log_reg.predict(X_test_scaled)

#         # Calculate accuracy
#         accuracy = accuracy_score(y_test, predictions)

#         # Print the results
#         print(f"LR: {lr}, Iters: {iters} \t->\t Accuracy: {accuracy:.4f}")

#         # Check if this is the best model so far
#         if accuracy > best_accuracy:
#             best_accuracy = accuracy
#             best_params = {'learning_rate': lr, 'n_iters': iters}

# print("-" * 65)
# print("Search complete.")
# print(f"\nBest Accuracy Achieved: {best_accuracy:.4f}")
# print(f"Best Parameters Found: {best_params}")

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from collections import Counter

# --- This is the manual Random Forest class ---
class SimpleRandomForest0:
    """
    A simple Random Forest classifier implemented with NumPy and Scikit-Learn's Decision Tree.
    """
    def __init__(self, n_trees=10, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees = n_trees
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        self.n_features = n_features
        self.trees = []

    def _bootstrap_sample(self, X, y):
        """Creates a random sample of the data with replacement."""
        n_samples = X.shape[0]
        # Get random indices with replacement
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]

    def _most_common_label(self, y):
        """Finds the most common label in a list of predictions."""
        counter = Counter(y)
        most_common = counter.most_common(1)[0][0]
        return most_common

    def fit(self, X, y):
        """Trains the random forest by creating and training multiple decision trees."""
        self.trees = []
        for _ in range(self.n_trees):
            # Create a bootstrapped sample
            X_sample, y_sample = self._bootstrap_sample(X, y)

            # Create and train a single decision tree
            tree = DecisionTreeClassifier(
                max_depth=self.max_depth,
                min_samples_split=self.min_samples_split,
                max_features=self.n_features # Feature subsampling
            )
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)

    def predict(self, X):
        """Makes predictions by aggregating the predictions from all trees."""
        # Get predictions from each tree
        tree_preds = np.array([tree.predict(X) for tree in self.trees])
        # Transpose so each row is a sample and each column is a tree's prediction
        tree_preds = tree_preds.T # shape: [n_samples, n_trees]

        # For each sample, find the most common prediction (majority vote)
        y_pred = [self._most_common_label(preds) for preds in tree_preds]
        return np.array(y_pred)

# --- Data Preparation ---
# For this script to be runnable, create a dummy DataFrame.
data = {
    'Open': np.random.rand(200) * 20 + 150, 'High': np.random.rand(200) * 20 + 155,
    'Low': np.random.rand(200) * 20 + 145, 'Close': np.random.rand(200) * 20 + 150,
}
df = pd.DataFrame(data)
df['Price_Direction'] = (df['Close'].shift(-1) > df['Close']).astype(int)
df.dropna(inplace=True)

# 1. Define features (X) and target (y)
features = ['Open', 'High', 'Low', 'Close']
target = 'Price_Direction'
X = df[features].values
y = df[target].values

# 2. Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# --- Loop to Check Different Parameter Combinations ---

# 3. Define the grid of parameters to check
param_grid = {
    'n_trees': [5, 10, 20],
    'max_depth': [5, 10],
    'n_features': [2, 4] # Number of features to consider at each split
}

# 4. Variables to store the best results
best_accuracy = 0.0
best_params = {}

print("Starting Manual Random Forest Hyperparameter Search...")
print("-" * 65)

# 5. Loop through every combination of parameters
for n_t in param_grid['n_trees']:
    for m_depth in param_grid['max_depth']:
        for n_feat in param_grid['n_features']:

            # Initialize the model with current parameters
            rf = SimpleRandomForest0(n_trees=n_t, max_depth=m_depth, n_features=n_feat)

            # Train the model
            rf.fit(X_train, y_train)

            # Make predictions
            predictions = rf.predict(X_test)

            # Calculate accuracy
            accuracy = accuracy_score(y_test, predictions)

            # Print the results
            print(f"Trees: {n_t}, Depth: {m_depth}, Features: {n_feat} \t->\t Accuracy: {accuracy:.4f}")

            # Check if this is the best model so far
            if accuracy > best_accuracy:
                best_accuracy = accuracy
                best_params = {'n_trees': n_t, 'max_depth': m_depth, 'n_features': n_feat}

print("-" * 65)
print("Search complete.")
print(f"\nBest Accuracy Achieved: {best_accuracy:.4f}")
print(f"Best Parameters Found: {best_params}")

# if best_params:
#     print("\nRetraining the best model on the full training data and saving it...")

#     # 1. Create a final model with the best parameters found
#     final_model = SimpleRandomForest0(
#         n_trees=best_params['n_trees'],
#         max_depth=best_params['max_depth'],
#         n_features=best_params['n_features']
#     )

#     # 2. Train it on the entire training set
#     final_model.fit(X_train, y_train)

#     # 3. Save the trained model to a file using pickle
#     filename = '/content/drive/MyDrive/Class AML/Project/best_random_forest.pkl'
#     with open(filename, 'wb') as file:
#         pickle.dump(final_model, file)

#     print(f"Model saved successfully as '{filename}'")
# else:
#     print("\nNo best model to save.")

# import pickle
# import numpy as np

# # --- You would need to have your SimpleRandomForest class definition in this script too ---

# # 1. Load the model from the file
# filename = 'best_random_forest.pkl'
# with open(filename, 'rb') as file:
#     loaded_model = pickle.load(file)

# # 2. Prepare some new data for prediction (must have 4 features)
# # Example: a single day's data [Open, High, Low, Close]
# new_data = np.array([[160, 165, 159, 163]])

# # 3. Use the loaded model to make a prediction
# prediction = loaded_model.predict(new_data)

# print(f"The loaded model predicts: {prediction[0]}")

df['Next_Close'] = df['Close'].shift(-1)

# The last row will have a NaN value, so we should drop it
df.dropna(inplace=True)

print("DataFrame with new target columns:")
print(df.head())

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score
import sys # Used to get a very large number for initialization

# --- This is the manual Random Forest Regressor class (Unchanged) ---
class SimpleRandomForestRegressor:
    """
    A simple Random Forest regressor implemented with NumPy and Scikit-Learn's Decision Tree.
    """
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees = n_trees
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        self.n_features = n_features
        self.trees = []

    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]

    def fit(self, X, y):
        self.trees = []
        if self.n_features is None:
            self.n_features = X.shape[1]

        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeRegressor(
                max_depth=self.max_depth,
                min_samples_split=self.min_samples_split,
                max_features=self.n_features,
                random_state=42
            )
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)

    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees])
        tree_preds = tree_preds.T
        y_pred = np.mean(tree_preds, axis=1)
        return y_pred

# --- Data Preparation ---
# Assume 'df' is your DataFrame with 'Next_Close' already created
# df = pd.read_csv('your_data.csv')

# 1. Define features (X) and the regression target (y)
features = ['Open', 'High', 'Low', 'Close']
X = df[features].values
y_reg = df['Next_Close'].values

# 2. Split data into training and testing sets
X_train, X_test, y_reg_train, y_reg_test = train_test_split(X, y_reg, test_size=0.2, random_state=42)

# --- Loop to Check Different Parameter Combinations ---

# 3. Define the grid of parameters you want to check
param_grid = {
    'n_trees': [10, 20, 50],
    'max_depth': [5, 10, 15],
    'n_features': [2, 3, 4] # Number of features to consider at each split
}

# 4. Variables to store the best results
# We want the lowest MSE, so we initialize best_mse to a very large number
best_mse = sys.float_info.max
best_params = {}
best_r2 = 0

print("Starting Random Forest Regressor Hyperparameter Search...")
print("-" * 75)
print(f"{'Trees':<10} {'Depth':<10} {'Features':<10} {'MSE':<20} {'R-squared':<20}")
print("-" * 75)

# 5. Loop through every combination of parameters in the grid
for n_t in param_grid['n_trees']:
    for m_depth in param_grid['max_depth']:
        for n_feat in param_grid['n_features']:

            # Initialize the model with the current set of parameters
            regressor = SimpleRandomForestRegressor(n_trees=n_t, max_depth=m_depth, n_features=n_feat)

            # Train the model
            regressor.fit(X_train, y_reg_train)

            # Make predictions
            predictions = regressor.predict(X_test)

            # Calculate the evaluation metrics
            mse = mean_squared_error(y_reg_test, predictions)
            r2 = r2_score(y_reg_test, predictions)

            # Print the results for this combination
            print(f"{n_t:<10} {m_depth:<10} {n_feat:<10} {mse:<20.2f} {r2:<20.4f}")

            # Check if this model is better than the best one found so far
            if mse < best_mse:
                best_mse = mse
                best_r2 = r2
                best_params = {'n_trees': n_t, 'max_depth': m_depth, 'n_features': n_feat}

print("-" * 75)
print("Search complete.")
print(f"\nBest MSE Achieved: {best_mse:.2f}")
print(f"R-squared at Best MSE: {best_r2:.4f}")
print(f"Best Parameters Found: {best_params}")

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score
import pickle

# --- This is the manual Random Forest Regressor class (Unchanged) ---
class SimpleRandomForestRegressor:
    """
    A simple Random Forest regressor implemented with NumPy and Scikit-Learn's Decision Tree.
    """
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees = n_trees
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        self.n_features = n_features
        self.trees = []

    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]

    def fit(self, X, y):
        self.trees = []
        if self.n_features is None:
            self.n_features = X.shape[1]

        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeRegressor(
                max_depth=self.max_depth,
                min_samples_split=self.min_samples_split,
                max_features=self.n_features,
                random_state=42
            )
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)

    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees])
        tree_preds = tree_preds.T
        y_pred = np.mean(tree_preds, axis=1)
        return y_pred

# --- Data Preparation ---
# Assume 'df' is your DataFrame with 'Next_Close' already created
# df = pd.read_csv('your_data.csv')

# 1. Define features (X) and the regression target (y)
features = ['Open', 'High', 'Low', 'Close']
X = df[features].values
y_reg = df['Next_Close'].values

# 2. Split data into training and testing sets
X_train, X_test, y_reg_train, y_reg_test = train_test_split(X, y_reg, test_size=0.2, random_state=42)

# --- Train and Evaluate the Final Model ---

# 3. Define the best parameters you found from the search
best_params = {
    'n_trees': 20,
    'max_depth': 10,
    'n_features': 2
}

print(f"Training final regressor with parameters: {best_params}")

# 4. Initialize the model with the best parameters
final_regressor = SimpleRandomForestRegressor(
    n_trees=best_params['n_trees'],
    max_depth=best_params['max_depth'],
    n_features=best_params['n_features']
)

# 5. Train the final model on the full training data
final_regressor.fit(X_train, y_reg_train)
print("Training complete.")

# 6. Make predictions and evaluate the final model
predictions = final_regressor.predict(X_test)
mse = mean_squared_error(y_reg_test, predictions)
r2 = r2_score(y_reg_test, predictions)

print("-" * 50)
print("Final Regression Model Evaluation:")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (R²): {r2:.4f}")
print("-" * 50)

# # --- (Optional but Recommended) Save the Final Regressor Model ---
# filename = '/content/drive/MyDrive/Class AML/Project/best_regressor_model.pkl'
# with open(filename, 'wb') as file:
#     pickle.dump(final_regressor, file)

# print(f"Final regressor model saved as '{filename}'")

import pickle
import numpy as np
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
from collections import Counter

# --- IMPORTANT: The class definitions must be available to load the models ---

class SimpleRandomForest:
    """The classifier class definition."""
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees, self.max_depth, self.min_samples_split, self.n_features = n_trees, max_depth, min_samples_split, n_features
        self.trees = []
    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]
    def _most_common_label(self, y):
        return Counter(y).most_common(1)[0][0]
    def fit(self, X, y):
        self.trees = []
        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeClassifier(max_depth=self.max_depth, min_samples_split=self.min_samples_split, max_features=self.n_features)
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)
    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees]).T
        return np.array([self._most_common_label(preds) for preds in tree_preds])

class SimpleRandomForestRegressor:
    """The regressor class definition."""
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees, self.max_depth, self.min_samples_split, self.n_features = n_trees, max_depth, min_samples_split, n_features
        self.trees = []
    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]
    def fit(self, X, y):
        self.trees = []
        if self.n_features is None: self.n_features = X.shape[1]
        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeRegressor(max_depth=self.max_depth, min_samples_split=self.min_samples_split, max_features=self.n_features)
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)
    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees]).T
        return np.mean(tree_preds, axis=1)

# --- Load the saved models from their files ---

try:
    with open('/content/drive/MyDrive/Class AML/Project/best_random_forest.pkl', 'rb') as file:
        classifier_model = pickle.load(file)
    print("✅ Classifier model ('best_random_forest.pkl') loaded successfully.")

    with open('/content/drive/MyDrive/Class AML/Project/best_regressor_model.pkl', 'rb') as file:
        regressor_model = pickle.load(file)
    print("✅ Regressor model ('best_regressor_model.pkl') loaded successfully.")

except FileNotFoundError as e:
    print(f"❌ Error: Could not find a model file. Please ensure '{e.filename}' is in the same directory.")

import pickle

import pandas as pd
from sklearn.model_selection import train_test_split

# --- Prepare the Test Data ---
# We need the original test set to make predictions on.
# This code should be identical to what was used during training.
# Let's recreate it to ensure this cell can run independently.

# Create a dummy DataFrame for the script to run
data = {
    'Open': np.random.rand(200) * 20 + 150, 'High': np.random.rand(200) * 20 + 155,
    'Low': np.random.rand(200) * 20 + 145, 'Close': np.random.rand(200) * 20 + 150,
}
df = pd.DataFrame(data)
df['Price_Direction'] = (df['Close'].shift(-1) > df['Close']).astype(int)
df['Next_Close'] = df['Close'].shift(-1)
df.dropna(inplace=True)

# Define features and both targets
features = ['Open', 'High', 'Low', 'Close']
X = df[features].values
y_clf = df['Price_Direction'].values
y_reg = df['Next_Close'].values

# Split data using the SAME random_state to get the original test set
X_train, X_test, y_clf_train, y_clf_test = train_test_split(X, y_clf, test_size=0.2, random_state=42)
_, _, y_reg_train, y_reg_test = train_test_split(X, y_reg, test_size=0.2, random_state=42)


# --- Apply the Hybrid Logic ---

# 1. Get the direction predictions from the classifier for the entire test set
direction_predictions = classifier_model.predict(X_test)

hybrid_predictions = []
# 2. Loop through each data point in the test set
for i in range(len(X_test)):
    # 3. If the classifier predicts the price will go UP...
    if direction_predictions[i] == 1:
        # ...ask the regressor to predict the price.
        # Note: we reshape X_test[i] because the model expects a 2D array
        price_prediction = regressor_model.predict(X_test[i].reshape(1, -1))
        hybrid_predictions.append(price_prediction[0])
    # 4. If the classifier predicts the price will go DOWN...
    else:
        # ...our strategy is to predict no change (current close price).
        # The 'Close' price is the 4th feature (index 3).
        current_close_price = X_test[i][3]
        hybrid_predictions.append(current_close_price)

# Convert the list of predictions to a NumPy array for easier calculations
hybrid_predictions = np.array(hybrid_predictions)

print("✅ Hybrid prediction logic applied successfully.")
print("\nFirst 5 hybrid predictions:")
print(hybrid_predictions[:5])

import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

# --- Evaluate the hybrid predictions against the actual test values ---

# Calculate standard regression metrics
hybrid_mse = mean_squared_error(y_reg_test, hybrid_predictions)
hybrid_mae = mean_absolute_error(y_reg_test, hybrid_predictions)
hybrid_r2 = r2_score(y_reg_test, hybrid_predictions)

print("-" * 50)
print("🏆 Hybrid Model Final Evaluation 🏆")
print(f"Mean Squared Error (MSE): {hybrid_mse:.2f}")
print(f"Mean Absolute Error (MAE): {hybrid_mae:.2f}")
print(f"R-squared (R²): {hybrid_r2:.4f}")
print("-" * 50)


# --- Create the Comparison Graph ---

# Set the figure size for better readability
plt.figure(figsize=(16, 8))

# Plot the actual prices
plt.plot(y_reg_test, label='Actual Prices', color='blue', marker='o', linestyle='-', markersize=4)

# Plot the hybrid model's predictions
plt.plot(hybrid_predictions, label='Hybrid Predictions', color='red', linestyle='--', marker='x', markersize=4)

# Add titles and labels for clarity
plt.title('Hybrid Model: Actual vs. Predicted Prices', fontsize=16)
plt.xlabel('Test Sample Index', fontsize=12)
plt.ylabel('Close Price', fontsize=12)
plt.legend()
plt.grid(True, linestyle='--', alpha=0.7)

# Display the plot
plt.show()

# --- Create a Scatter Plot for a different perspective ---

plt.figure(figsize=(8, 8))
plt.scatter(y_reg_test, hybrid_predictions, alpha=0.6, edgecolors='k')
plt.plot([y_reg_test.min(), y_reg_test.max()], [y_reg_test.min(), y_reg_test.max()], 'r--', lw=2, label='Perfect Prediction')

# Add titles and labels
plt.title('Scatter Plot: Actual vs. Predicted Prices', fontsize=16)
plt.xlabel('Actual Prices', fontsize=12)
plt.ylabel('Predicted Prices', fontsize=12)
plt.legend()
plt.grid(True)

# Show the plot
plt.show()

from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Get the direction predictions from the classifier for the entire test set
direction_predictions = classifier_model.predict(X_test)

print("--- Classifier Evaluation ---")
print(classification_report(y_clf_test, direction_predictions, target_names=['Down (0)', 'Up (1)']))

# Create and display the Confusion Matrix
cm = confusion_matrix(y_clf_test, direction_predictions)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Down (0)', 'Up (1)'], yticklabels=['Down (0)', 'Up (1)'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Classifier Confusion Matrix')
plt.show()

import pandas as pd
import plotly.graph_objects as go
from datetime import timedelta
import numpy as np # Import numpy for the random operations

# --- 1. Load and Prepare the Data ---
try:
    # Attempt to load the dataset from the specified path
    df = pd.read_csv('/content/drive/MyDrive/Class AML/Project/SENSEX_01012015_12092025-daily - SENSEX_01012015_12092025-daily.csv')
    print("✅ Successfully loaded SENSEX data from CSV.")
except FileNotFoundError:
    # If the file is not found, create a dummy dataframe for demonstration
    print("⚠️ CSV file not found. Creating a dummy dataset for demonstration.")
    date_rng = pd.date_range(start='2024-01-01', end='2024-05-01', freq='B') # Business days
    dummy_data_dict = {
        'Date': date_rng,
        'Open': 100 + pd.Series(range(len(date_rng))).cumsum() + (np.random.rand(len(date_rng)) * 20),
        'High': 105 + pd.Series(range(len(date_rng))).cumsum() + (np.random.rand(len(date_rng)) * 20),
        'Low': 95 + pd.Series(range(len(date_rng))).cumsum() + (np.random.rand(len(date_rng)) * 20),
        'Close': 102 + pd.Series(range(len(date_rng))).cumsum() + (np.random.rand(len(date_rng)) * 20)
    }
    df = pd.DataFrame(dummy_data_dict)


# Convert 'Date' column to datetime objects for proper plotting
# This will now work because the overwrite has been removed
df['Date'] = pd.to_datetime(df['Date'])
df.sort_values('Date', inplace=True)

# For this visualization, let's focus on the last 60 days of historical data
df_recent = df.tail(60).copy()

# --- 2. Generate Future Predictions ---
# This is a simple forecasting method for demonstration.
# In a real scenario, you would use your trained regression model here.

last_row = df_recent.iloc[-1]
future_predictions = []
current_date = last_row['Date']
current_close = last_row['Close']

# Let's predict for the next 5 business days
for i in range(5):
    # Move to the next business day
    current_date += timedelta(days=1)
    while current_date.weekday() >= 5: # Skip weekends (Monday=0, Sunday=6)
        current_date += timedelta(days=1)

    # Simple prediction logic: slightly random walk from the last close
    open_price = current_close * (1 + (np.random.rand() - 0.5) * 0.02) # Fluctuate around last close
    close_price = open_price * (1 + (np.random.rand() - 0.5) * 0.03) # Fluctuate from the new open
    high_price = max(open_price, close_price) * (1 + np.random.rand() * 0.01)
    low_price = min(open_price, close_price) * (1 - np.random.rand() * 0.01)

    future_predictions.append({
        'Date': current_date,
        'Open': open_price,
        'High': high_price,
        'Low': low_price,
        'Close': close_price
    })
    # The next day's prediction starts from the current day's close
    current_close = close_price

df_pred = pd.DataFrame(future_predictions)

# --- 3. Create the Candlestick Chart ---

fig = go.Figure()

# Add the historical data trace
fig.add_trace(go.Candlestick(
    x=df_recent['Date'],
    open=df_recent['Open'],
    high=df_recent['High'],
    low=df_recent['Low'],
    close=df_recent['Close'],
    name='Historical Data',
    increasing_line_color='green',
    decreasing_line_color='red'
))

# Add the predicted data trace with a different style for distinction
fig.add_trace(go.Candlestick(
    x=df_pred['Date'],
    open=df_pred['Open'],
    high=df_pred['High'],
    low=df_pred['Low'],
    close=df_pred['Close'],
    name='Predicted Data',
    increasing_line_color='rgba(144, 238, 144, 0.8)',
    decreasing_line_color='rgba(255, 182, 193, 0.8)',
))

# --- 4. Customize the Chart's Appearance ---
fig.update_layout(
    title='SENSEX Price: Historical Data and 5-Day Prediction',
    yaxis_title='Stock Price (INR)',
    xaxis_title='Date',
    xaxis_rangeslider_visible=False,
    template='plotly_dark',
    legend=dict(
        orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1
    )
)
fig.update_xaxes(
    rangebreaks=[
        dict(bounds=["sat", "mon"]), # hide weekends
    ]
)
fig.show()

import pandas as pd
import plotly.graph_objects as go
from datetime import timedelta
import numpy as np
import pickle

# --- (Prerequisite) Define the Random Forest Classes ---
# The class definitions must be available for pickle to load the models.
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
from collections import Counter

class SimpleRandomForest:
    """The classifier class definition."""
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees, self.max_depth, self.min_samples_split, self.n_features = n_trees, max_depth, min_samples_split, n_features
        self.trees = []
    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]
    def _most_common_label(self, y):
        return Counter(y).most_common(1)[0][0]
    def fit(self, X, y):
        self.trees = []
        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeClassifier(max_depth=self.max_depth, min_samples_split=self.min_samples_split, max_features=self.n_features)
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)
    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees]).T
        return np.array([self._most_common_label(preds) for preds in tree_preds])

class SimpleRandomForestRegressor:
    """The regressor class definition."""
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees, self.max_depth, self.min_samples_split, self.n_features = n_trees, max_depth, min_samples_split, n_features
        self.trees = []
    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]
    def fit(self, X, y):
        self.trees = []
        if self.n_features is None: self.n_features = X.shape[1]
        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeRegressor(max_depth=self.max_depth, min_samples_split=self.min_samples_split, max_features=self.n_features)
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)
    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees]).T
        return np.mean(tree_preds, axis=1)

# --- 1. Load Data and Trained Models ---
try:
    with open('/content/drive/MyDrive/Class AML/Project/best_random_forest.pkl', 'rb') as file:
        classifier_model = pickle.load(file)
    print("✅ Classifier model loaded.")
    with open('/content/drive/MyDrive/Class AML/Project/best_regressor_model.pkl', 'rb') as file:
        regressor_model = pickle.load(file)
    print("✅ Regressor model loaded.")

    df = pd.read_csv('/content/drive/MyDrive/Class AML/Project/SENSEX_01012015_12092025-daily - SENSEX_01012015_12092025-daily.csv')
    print("✅ SENSEX data loaded.")
except Exception as e:
    print(f"❌ Error loading models or data: {e}")
    # Create dummy models and data if loading fails, so the script can run
    classifier_model, regressor_model = None, None
    date_rng = pd.date_range(start='2024-01-01', end='2024-05-01', freq='B')
    df = pd.DataFrame({'Date': date_rng, 'Open': 100+np.cumsum(np.random.randn(len(date_rng))), 'High': 102+np.cumsum(np.random.randn(len(date_rng))), 'Low': 98+np.cumsum(np.random.randn(len(date_rng))), 'Close': 101+np.cumsum(np.random.randn(len(date_rng)))})


df['Date'] = pd.to_datetime(df['Date'])
df.sort_values('Date', inplace=True)
df_recent = df.tail(60).copy()

# --- 2. Generate Predictions with the REAL Hybrid Model ---
if classifier_model and regressor_model:
    future_predictions = []
    last_row = df_recent.iloc[-1]
    current_date = last_row['Date']

    # Prepare the initial features from the last available day of real data
    current_features = last_row[['Open', 'High', 'Low', 'Close']].values

    for i in range(5): # Predict for 5 days
        # Move to the next business day
        current_date += timedelta(days=1)
        while current_date.weekday() >= 5:
            current_date += timedelta(days=1)

        # Reshape features for model prediction (expects a 2D array)
        features_for_prediction = current_features.reshape(1, -1)

        # A. Use the classifier to predict direction
        direction_prediction = classifier_model.predict(features_for_prediction)

        # B. Apply the hybrid logic
        if direction_prediction[0] == 1:
            # If direction is UP, use the regressor to predict the next close price
            predicted_close = regressor_model.predict(features_for_prediction)[0]
        else:
            # If direction is DOWN, strategy is to predict no change
            predicted_close = current_features[3] # Current day's close price

        # C. Create plausible OHLC values for the new predicted day
        # The new 'Open' is the previous day's 'Close'
        predicted_open = current_features[3]
        predicted_high = max(predicted_open, predicted_close) * 1.005 # Add a small margin
        predicted_low = min(predicted_open, predicted_close) * 0.995 # Add a small margin

        # D. Store the full predicted candle
        future_predictions.append({
            'Date': current_date,
            'Open': predicted_open,
            'High': predicted_high,
            'Low': predicted_low,
            'Close': predicted_close
        })

        # E. IMPORTANT: Update the features for the *next* day's prediction
        # The model will now use its own last prediction to predict the next day
        current_features = np.array([predicted_open, predicted_high, predicted_low, predicted_close])

    df_pred = pd.DataFrame(future_predictions)
else:
    print("⚠️ Models not loaded, cannot generate real predictions. Using empty dataframe.")
    df_pred = pd.DataFrame()


# --- 3. Create the Candlestick Chart (This part remains the same) ---
fig = go.Figure()
fig.add_trace(go.Candlestick(
    x=df_recent['Date'], open=df_recent['Open'], high=df_recent['High'],
    low=df_recent['Low'], close=df_recent['Close'], name='Historical Data',
    increasing_line_color='green', decreasing_line_color='red'
))
if not df_pred.empty:
    fig.add_trace(go.Candlestick(
        x=df_pred['Date'], open=df_pred['Open'], high=df_pred['High'],
        low=df_pred['Low'], close=df_pred['Close'], name='Predicted Data',
        increasing_line_color='rgba(144, 238, 144, 0.8)',
        decreasing_line_color='rgba(255, 182, 193, 0.8)'
    ))

# --- 4. Customize the Chart's Appearance (This part remains the same) ---
fig.update_layout(
    title='SENSEX Price: Historical Data and 5-Day Hybrid Model Prediction',
    yaxis_title='Stock Price (INR)', xaxis_title='Date',
    xaxis_rangeslider_visible=False, template='plotly_dark',
    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
)
fig.update_xaxes(rangebreaks=[dict(bounds=["sat", "mon"])])
fig.show()

import pickle
import os

# --- IMPORTANT ASSUMPTION ---
# This script assumes you have already trained and have the following two
# model objects available in your environment:
#
# 1. classifier_model: Your trained SimpleRandomForest classifier
# 2. regressor_model:  Your trained SimpleRandomForestRegressor
#
# If you don't have them, you must run your training scripts first.

# --- 1. Combine the trained models into a single dictionary ---
# This is the standard way to package a multi-part model.
hybrid_model_components = {
    'classifier': classifier_model,
    'regressor': regressor_model
}

print("✅ Models have been packaged into a dictionary.")

# --- 2. Define the save path and filename ---
# It's good practice to ensure the directory exists.
save_directory = '/content/drive/MyDrive/Class AML/Project/'
if not os.path.exists(save_directory):
    os.makedirs(save_directory)
    print(f"Created directory: {save_directory}")

filename = os.path.join(save_directory, 'hybrid_model_components.pkl')

# --- 3. Save the dictionary to a file using pickle ---
try:
    with open(filename, 'wb') as file:
        pickle.dump(hybrid_model_components, file)
    print(f"🏆 Hybrid model components saved successfully to:")
    print(f"   '{filename}'")

except Exception as e:
    print(f"❌ An error occurred while saving the model: {e}")

import pandas as pd
import numpy as np
import pickle
import os
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, classification_report, confusion_matrix
from collections import Counter
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor

# --- (Prerequisite) Define the Random Forest Classes ---
# These class definitions MUST be present for pickle to load the models correctly.
class SimpleRandomForest:
    """The classifier class definition."""
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees, self.max_depth, self.min_samples_split, self.n_features = n_trees, max_depth, min_samples_split, n_features
        self.trees = []
    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]
    def _most_common_label(self, y):
        return Counter(y).most_common(1)[0][0]
    def fit(self, X, y):
        self.trees = []
        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeClassifier(max_depth=self.max_depth, min_samples_split=self.min_samples_split, max_features=self.n_features)
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)
    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees]).T
        return np.array([self._most_common_label(preds) for preds in tree_preds])

class SimpleRandomForestRegressor:
    """The regressor class definition."""
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees, self.max_depth, self.min_samples_split, self.n_features = n_trees, max_depth, min_samples_split, n_features
        self.trees = []
    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]
    def fit(self, X, y):
        self.trees = []
        if self.n_features is None: self.n_features = X.shape[1]
        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeRegressor(max_depth=self.max_depth, min_samples_split=self.min_samples_split, max_features=self.n_features)
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)
    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees]).T
        return np.mean(tree_preds, axis=1)

# --- 1. Function to Load All Models ---
def load_all_models(path_prefix='/content/drive/MyDrive/Class AML/Project/'):
    """Loads the standalone regressor and the hybrid model components."""
    try:
        with open(os.path.join(path_prefix, 'best_regressor_model.pkl'), 'rb') as file:
            standalone_regressor = pickle.load(file)
        with open(os.path.join(path_prefix, 'hybrid_model_components.pkl'), 'rb') as file:
            hybrid_components = pickle.load(file)
        print("✅ All models loaded successfully.")
        return standalone_regressor, hybrid_components['classifier'], hybrid_components['regressor']
    except FileNotFoundError as e:
        print(f"❌ Error: Model file not found. Make sure the files are in the correct directory.")
        print(e)
        return None, None, None

# --- 2. Function to Process Input Data ---
def process_input_data(csv_path):
    """Loads and prepares the user's input CSV for prediction and evaluation."""
    try:
        df = pd.read_csv(csv_path)
        df['Date'] = pd.to_datetime(df['Date'])
        df['Price_Direction'] = (df['Close'].shift(-1) > df['Close']).astype(int)
        df['Next_Close'] = df['Close'].shift(-1)
        df.dropna(inplace=True)
        if df.empty:
            print(f"❌ Error: The input file '{csv_path}' has too few rows of data to make a prediction.")
            print("         Please provide a CSV file with at least 2 rows of data.")
            return None, None, None
        features = ['Open', 'High', 'Low', 'Close']
        X = df[features].values
        y_direction = df['Price_Direction'].values
        y_price = df['Next_Close'].values
        print(f"✅ Data from '{csv_path}' processed successfully.")
        return X, y_direction, y_price
    except FileNotFoundError:
        print(f"❌ Error: Input CSV file not found at '{csv_path}'.")
        return None, None, None
    except KeyError as e:
        print(f"❌ Error: The CSV file is missing a required column: {e}")
        return None, None, None

# --- 3. Main Evaluation Function ---
def evaluate_and_compare(csv_path):
    """Main function to run the full prediction and comparison pipeline."""
    reg_model, clf_model, hybrid_reg_model = load_all_models()
    if reg_model is None: return

    X_test, y_direction_test, y_price_test = process_input_data(csv_path)
    if X_test is None: return

    # --- Generate Predictions ---
    reg_predictions = reg_model.predict(X_test)
    direction_predictions = clf_model.predict(X_test)
    hybrid_predictions = np.array([
        hybrid_reg_model.predict(X_test[i].reshape(1, -1))[0] if direction_predictions[i] == 1 else X_test[i][3]
        for i in range(len(X_test))
    ])

    print("\n" + "="*60)
    print("      HYBRID MODEL: CLASSIFIER PERFORMANCE ANALYSIS")
    print("="*60)

    # --- FIXED SECTION: Check for number of classes before printing report ---
    unique_labels = np.union1d(y_direction_test, direction_predictions)
    if len(unique_labels) > 1:
        # If we have both classes, print the full report
        print(classification_report(y_direction_test, direction_predictions, target_names=['Down (0)', 'Up (1)']))
        cm = confusion_matrix(y_direction_test, direction_predictions)
        plt.figure(figsize=(6, 4))
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Down (0)', 'Up (1)'], yticklabels=['Down (0)', 'Up (1)'])
        plt.title('Hybrid Model - Confusion Matrix')
        plt.xlabel('Predicted')
        plt.ylabel('Actual')
        plt.show()
    else:
        # If we only have one class, print a warning instead of crashing
        the_only_class = unique_labels[0]
        class_name = "'Up (1)'" if the_only_class == 1 else "'Down (0)'"
        print(f"⚠️  Classification Report Skipped: The provided data only contains one outcome class ({class_name}).")
        print("    A detailed report and confusion matrix require at least one sample of both 'Up' and 'Down' days.")
    # --- END OF FIXED SECTION ---

    print("\n" + "="*60)
    print("      REGRESSION MODELS: PREDICTION ACCURACY COMPARISON")
    print("="*60)

    metrics_data = {
        'Metric': ['Mean Squared Error (MSE)', 'Mean Absolute Error (MAE)', 'R-squared (R²)'],
        'Hybrid Model': [
            mean_squared_error(y_price_test, hybrid_predictions),
            mean_absolute_error(y_price_test, hybrid_predictions),
            r2_score(y_price_test, hybrid_predictions)
        ],
        'Standalone Regressor': [
            mean_squared_error(y_price_test, reg_predictions),
            mean_absolute_error(y_price_test, reg_predictions),
            r2_score(y_price_test, reg_predictions)
        ]
    }
    metrics_df = pd.DataFrame(metrics_data)
    print(metrics_df.to_string(index=False))
    print("="*60)

    # --- Visual Comparison ---
    plt.figure(figsize=(18, 9))
    plt.plot(y_price_test, label='Actual Prices', color='blue', linestyle='-', marker='o', markersize=5, alpha=0.7)
    plt.plot(hybrid_predictions, label='Hybrid Model Predictions', color='red', linestyle='--', marker='x', markersize=4)
    plt.plot(reg_predictions, label='Standalone Regressor Predictions', color='green', linestyle=':', marker='s', markersize=4)
    plt.title('Model Comparison: Actual vs. Predicted Prices', fontsize=18)
    plt.xlabel('Test Sample Index', fontsize=12)
    plt.ylabel('Close Price', fontsize=12)
    plt.legend(fontsize=12)
    plt.grid(True, which='both', linestyle='--', linewidth=0.5)
    plt.show()

# --- RUN THE EVALUATION ---
input_csv_file_path = '/content/drive/MyDrive/Class AML/Project/Untitled spreadsheet - Sheet1.csv'
evaluate_and_compare(input_csv_file_path)

import pandas as pd
import numpy as np
import pickle
import os
from datetime import timedelta
from collections import Counter
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor

# --- (Prerequisite) Define the Random Forest Classes ---
# These class definitions MUST be present for pickle to load the models correctly.
class SimpleRandomForest:
    """The classifier class definition."""
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees, self.max_depth, self.min_samples_split, self.n_features = n_trees, max_depth, min_samples_split, n_features
        self.trees = []
    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]
    def _most_common_label(self, y):
        return Counter(y).most_common(1)[0][0]
    def fit(self, X, y):
        self.trees = []
        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeClassifier(max_depth=self.max_depth, min_samples_split=self.min_samples_split, max_features=self.n_features)
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)
    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees]).T
        return np.array([self._most_common_label(preds) for preds in tree_preds])

class SimpleRandomForestRegressor:
    """The regressor class definition."""
    def __init__(self, n_trees=20, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees, self.max_depth, self.min_samples_split, self.n_features = n_trees, max_depth, min_samples_split, n_features
        self.trees = []
    def _bootstrap_sample(self, X, y):
        n_samples = X.shape[0]
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]
    def fit(self, X, y):
        self.trees = []
        if self.n_features is None: self.n_features = X.shape[1]
        for _ in range(self.n_trees):
            X_sample, y_sample = self._bootstrap_sample(X, y)
            tree = DecisionTreeRegressor(max_depth=self.max_depth, min_samples_split=self.min_samples_split, max_features=self.n_features)
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)
    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees]).T
        return np.mean(tree_preds, axis=1)

# --- 1. Function to Load the Hybrid Model ---
def load_hybrid_model(path_prefix='/content/drive/MyDrive/Class AML/Project/'):
    """Loads the hybrid model components."""
    try:
        with open(os.path.join(path_prefix, 'hybrid_model_components.pkl'), 'rb') as file:
            hybrid_components = pickle.load(file)
        print("✅ Hybrid model loaded successfully.")
        return hybrid_components['classifier'], hybrid_components['regressor']
    except FileNotFoundError as e:
        print(f"❌ Error: Model file 'hybrid_model_components.pkl' not found.")
        return None, None

# --- 2. Main Prediction Function ---
def predict_future_prices(csv_path, days_to_predict=5):
    """Loads the latest data from a CSV, and predicts future prices for a number of days."""
    clf_model, reg_model = load_hybrid_model()
    if clf_model is None: return

    # --- Load and prepare the starting data ---
    try:
        df = pd.read_csv(csv_path)
        if df.empty:
            print(f"❌ Error: The input file '{csv_path}' is empty.")
            return

        # Get the last valid row of data to start the prediction from
        last_row = df.iloc[-1]
        current_date = pd.to_datetime(last_row['Date'])
        current_features = last_row[['Open', 'High', 'Low', 'Close']].values

    except FileNotFoundError:
        print(f"❌ Error: Input CSV file not found at '{csv_path}'.")
        return
    except KeyError as e:
        print(f"❌ Error: The CSV file is missing a required column: {e}")
        return

    # --- Iteratively predict the future ---
    future_predictions = []
    for _ in range(days_to_predict):
        # Move to the next business day
        current_date += timedelta(days=1)
        while current_date.weekday() >= 5: # Skip weekends
            current_date += timedelta(days=1)

        features_for_prediction = current_features.reshape(1, -1)

        # Use the classifier to predict the direction
        direction = clf_model.predict(features_for_prediction)[0]

        # Apply the hybrid logic
        if direction == 1:
            predicted_close = reg_model.predict(features_for_prediction)[0]
            action = "UP (Regressed)"
        else:
            predicted_close = current_features[3] # Use last close price
            action = "DOWN (No Change)"

        # Create plausible OHLC values for the new predicted day
        predicted_open = current_features[3] # Today's open is yesterday's close
        predicted_high = max(predicted_open, predicted_close) * 1.005
        predicted_low = min(predicted_open, predicted_close) * 0.995

        future_predictions.append({
            'Date': current_date.strftime('%Y-%m-%d'),
            'Open': predicted_open,
            'High': predicted_high,
            'Low': predicted_low,
            'Close': predicted_close,
            'Predicted_Action': action
        })

        # Update features for the next iteration
        current_features = np.array([predicted_open, predicted_high, predicted_low, predicted_close])

    # --- Display the results ---
    predictions_df = pd.DataFrame(future_predictions)
    print("\n" + "="*70)
    print(f"      FORECAST: Next {days_to_predict} Business Days")
    print("="*70)
    print(predictions_df.to_string(index=False))
    print("="*70)


# --- RUN THE PREDICTION ---
# Provide the path to your CSV file with the latest market data.
# This file only needs one row of data, but it must have the correct columns.
input_csv_file = '/content/drive/MyDrive/Class AML/Project/Untitled spreadsheet - Sheet1.csv'
predict_future_prices(input_csv_file)

