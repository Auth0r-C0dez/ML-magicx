# -*- coding: utf-8 -*-
"""Hybrid-model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-DVxPyKwGqNkIrWnI7SsWKv61favarn5
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

df= pd.read_csv('/content/drive/MyDrive/Class AML/Project/SENSEX_01012015_12092025-daily - SENSEX_01012015_12092025-daily.csv')

df.head()

df = df.drop('Date',axis=1)

df.head()

df.info()

df['Price_Direction'] = (df['Close'].shift(-1) > df['Close']).astype(int)

df.head()

df.tail()

df['Price_Direction'].value_counts()

df.info()

# import numpy as np
# from sklearn.model_selection import train_test_split
# from sklearn.preprocessing import StandardScaler
# from sklearn.metrics import accuracy_score

# class SimpleSVM:
#     """
#     A simple Support Vector Machine classifier implemented with NumPy.
#     """
#     def __init__(self, learning_rate=0.001, lambda_param=0.01, n_iters=1000):
#         self.lr = learning_rate
#         self.lambda_param = lambda_param
#         self.n_iters = n_iters
#         self.w = None  # Weights
#         self.b = None  # Bias

#     def fit(self, X, y):
#         """
#         Train the SVM model using gradient descent.

#         X: Training features
#         y: Target labels {0, 1}
#         """
#         n_samples, n_features = X.shape

#         # SVM math requires labels to be -1 and 1
#         y_ = np.where(y <= 0, -1, 1)

#         # Initialize parameters
#         self.w = np.zeros(n_features)
#         self.b = 0

#         # Gradient descent training loop
#         for _ in range(self.n_iters):
#             for idx, x_i in enumerate(X):
#                 # Check the condition for hinge loss
#                 condition = y_[idx] * (np.dot(x_i, self.w) - self.b) >= 1

#                 # Calculate gradients based on the condition
#                 if condition:
#                     # Gradient of the regularization term only
#                     dw = 2 * self.lambda_param * self.w
#                     db = 0
#                 else:
#                     # Gradient of both regularization and loss term
#                     dw = 2 * self.lambda_param * self.w - np.dot(x_i, y_[idx])
#                     db = y_[idx]

#                 # Update the weights and bias
#                 self.w -= self.lr * dw
#                 self.b -= self.lr * db

#     def predict(self, X):
#         """
#         Predict class labels for new data.
#         """
#         # Calculate the linear combination (decision boundary)
#         linear_output = np.dot(X, self.w) - self.b

#         # Get the sign of the output and convert back to {0, 1}
#         predictions = np.sign(linear_output)
#         return np.where(predictions == -1, 0, 1)

# # --- How to Use with Your Dataset ---

# # Assume 'df' is your DataFrame with columns ['Open', 'High', 'Low', 'Close', 'Price_Direction']

# # 1. Define features (X) and target (y)
# features = ['Open', 'High', 'Low', 'Close']
# target = 'Price_Direction'
# X = df[features].values
# y = df[target].values

# # 2. Split data into training and testing sets
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# # 3. Scale your features (CRITICAL STEP for SVM)
# scaler = StandardScaler()
# X_train_scaled = scaler.fit_transform(X_train)
# X_test_scaled = scaler.transform(X_test)

# # 4. Initialize and train your manual SVM
# svm = SimpleSVM(learning_rate=0.0001, n_iters=500) # Learning rate needs to be small
# svm.fit(X_train_scaled, y_train)

# # 5. Make predictions on the test set
# predictions = svm.predict(X_test_scaled)

# # 6. Evaluate the model
# accuracy = accuracy_score(y_test, predictions)
# print(f"Accuracy of the manual SVM: {accuracy:.2f}")

# param_grid = {
#     'learning_rate': [0.001, 0.0001, 0.00001],
#     'lambda_param': [0.01, 0.1, 1],
#     'n_iters': [500, 1000]
# }

# # 5. Variables to store the best results found
# best_accuracy = 0.0
# best_params = {}

# print("Starting Manual SVM Hyperparameter Search...")
# print("-" * 65)

# # 6. Loop through every combination of parameters in the grid
# for lr in param_grid['learning_rate']:
#     for l_param in param_grid['lambda_param']:
#         for iters in param_grid['n_iters']:

#             # Initialize the SimpleSVM model with the current set of parameters
#             svm = SimpleSVM(learning_rate=lr, lambda_param=l_param, n_iters=iters)

#             # Train the model
#             svm.fit(X_train_scaled, y_train)

#             # Make predictions on the test set
#             predictions = svm.predict(X_test_scaled)

#             # Calculate the accuracy
#             accuracy = accuracy_score(y_test, predictions)

#             # Print the parameters and their corresponding accuracy
#             print(f"LR: {lr}, Lambda: {l_param}, Iters: {iters} \t->\t Accuracy: {accuracy:.4f}")

#             # Check if this combination gave a better accuracy
#             if accuracy > best_accuracy:
#                 best_accuracy = accuracy
#                 best_params = {'learning_rate': lr, 'lambda_param': l_param, 'n_iters': iters}

# print("-" * 65)
# print("Search complete.")
# print(f"\nBest Accuracy Achieved: {best_accuracy:.4f}")
# print(f"Best Parameters Found: {best_params}")

# import numpy as np
# import pandas as pd
# from sklearn.model_selection import train_test_split
# from sklearn.preprocessing import StandardScaler
# from sklearn.metrics import accuracy_score

# # --- This is the manual Logistic Regression class ---
# class SimpleLogisticRegression:
#     """
#     A simple Logistic Regression classifier implemented with NumPy.
#     """
#     def __init__(self, learning_rate=0.001, n_iters=1000):
#         self.lr = learning_rate
#         self.n_iters = n_iters
#         self.weights = None
#         self.bias = None

#     def _sigmoid(self, z):
#         """Private helper function to compute the sigmoid"""
#         return 1 / (1 + np.exp(-z))

#     def fit(self, X, y):
#         """
#         Train the Logistic Regression model using gradient descent.
#         """
#         n_samples, n_features = X.shape

#         # Initialize parameters
#         self.weights = np.zeros(n_features)
#         self.bias = 0

#         # Gradient descent training loop
#         for _ in range(self.n_iters):
#             # Calculate linear model and apply sigmoid
#             linear_model = np.dot(X, self.weights) + self.bias
#             y_predicted = self._sigmoid(linear_model)

#             # Calculate gradients
#             dw = (1 / n_samples) * np.dot(X.T, (y_predicted - y))
#             db = (1 / n_samples) * np.sum(y_predicted - y)

#             # Update weights and bias
#             self.weights -= self.lr * dw
#             self.bias -= self.lr * db

#     def predict(self, X):
#         """
#         Predict class labels for new data.
#         """
#         linear_model = np.dot(X, self.weights) + self.bias
#         y_predicted_probs = self._sigmoid(linear_model)

#         # Classify based on a 0.5 threshold
#         y_predicted_cls = [1 if i > 0.5 else 0 for i in y_predicted_probs]
#         return np.array(y_predicted_cls)

# # --- Data Preparation ---
# # For this script to be runnable, let's create a dummy DataFrame.
# # In your code, you would load your actual data into 'df'.
# data = {
#     'Open': np.random.rand(200) * 20 + 150,
#     'High': np.random.rand(200) * 20 + 155,
#     'Low': np.random.rand(200) * 20 + 145,
#     'Close': np.random.rand(200) * 20 + 150,
# }
# df = pd.DataFrame(data)
# df['Price_Direction'] = (df['Close'].shift(-1) > df['Close']).astype(int)
# df.dropna(inplace=True)

# # 1. Define features (X) and target (y)
# features = ['Open', 'High', 'Low', 'Close']
# target = 'Price_Direction'
# X = df[features].values
# y = df[target].values

# # 2. Split data into training and testing sets
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# # 3. Scale your features (Important for gradient descent)
# scaler = StandardScaler()
# X_train_scaled = scaler.fit_transform(X_train)
# X_test_scaled = scaler.transform(X_test)

# # --- Loop to Check Different Parameter Combinations ---

# # 4. Define the grid of parameters to check
# param_grid = {
#     'learning_rate': [0.1, 0.01, 0.001],
#     'n_iters': [1000, 2000, 3000]
# }

# # 5. Variables to store the best results
# best_accuracy = 0.0
# best_params = {}

# print("Starting Manual Logistic Regression Hyperparameter Search...")
# print("-" * 65)

# # 6. Loop through every combination of parameters
# for lr in param_grid['learning_rate']:
#     for iters in param_grid['n_iters']:
#         # Initialize the model with current parameters
#         log_reg = SimpleLogisticRegression(learning_rate=lr, n_iters=iters)

#         # Train the model
#         log_reg.fit(X_train_scaled, y_train)

#         # Make predictions
#         predictions = log_reg.predict(X_test_scaled)

#         # Calculate accuracy
#         accuracy = accuracy_score(y_test, predictions)

#         # Print the results
#         print(f"LR: {lr}, Iters: {iters} \t->\t Accuracy: {accuracy:.4f}")

#         # Check if this is the best model so far
#         if accuracy > best_accuracy:
#             best_accuracy = accuracy
#             best_params = {'learning_rate': lr, 'n_iters': iters}

# print("-" * 65)
# print("Search complete.")
# print(f"\nBest Accuracy Achieved: {best_accuracy:.4f}")
# print(f"Best Parameters Found: {best_params}")

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from collections import Counter

# --- This is the manual Random Forest class ---
class SimpleRandomForest0:
    """
    A simple Random Forest classifier implemented with NumPy and Scikit-Learn's Decision Tree.
    """
    def __init__(self, n_trees=10, max_depth=10, min_samples_split=2, n_features=None):
        self.n_trees = n_trees
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        self.n_features = n_features
        self.trees = []

    def _bootstrap_sample(self, X, y):
        """Creates a random sample of the data with replacement."""
        n_samples = X.shape[0]
        # Get random indices with replacement
        idxs = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[idxs], y[idxs]

    def _most_common_label(self, y):
        """Finds the most common label in a list of predictions."""
        counter = Counter(y)
        most_common = counter.most_common(1)[0][0]
        return most_common

    def fit(self, X, y):
        """Trains the random forest by creating and training multiple decision trees."""
        self.trees = []
        for _ in range(self.n_trees):
            # Create a bootstrapped sample
            X_sample, y_sample = self._bootstrap_sample(X, y)

            # Create and train a single decision tree
            tree = DecisionTreeClassifier(
                max_depth=self.max_depth,
                min_samples_split=self.min_samples_split,
                max_features=self.n_features # Feature subsampling
            )
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)

    def predict(self, X):
        """Makes predictions by aggregating the predictions from all trees."""
        # Get predictions from each tree
        tree_preds = np.array([tree.predict(X) for tree in self.trees])
        # Transpose so each row is a sample and each column is a tree's prediction
        tree_preds = tree_preds.T # shape: [n_samples, n_trees]

        # For each sample, find the most common prediction (majority vote)
        y_pred = [self._most_common_label(preds) for preds in tree_preds]
        return np.array(y_pred)

# --- Data Preparation ---
# For this script to be runnable, create a dummy DataFrame.
data = {
    'Open': np.random.rand(200) * 20 + 150, 'High': np.random.rand(200) * 20 + 155,
    'Low': np.random.rand(200) * 20 + 145, 'Close': np.random.rand(200) * 20 + 150,
}
df = pd.DataFrame(data)
df['Price_Direction'] = (df['Close'].shift(-1) > df['Close']).astype(int)
df.dropna(inplace=True)

# 1. Define features (X) and target (y)
features = ['Open', 'High', 'Low', 'Close']
target = 'Price_Direction'
X = df[features].values
y = df[target].values

# 2. Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# --- Loop to Check Different Parameter Combinations ---

# 3. Define the grid of parameters to check
param_grid = {
    'n_trees': [5, 10, 20],
    'max_depth': [5, 10],
    'n_features': [2, 4] # Number of features to consider at each split
}

# 4. Variables to store the best results
best_accuracy = 0.0
best_params = {}

print("Starting Manual Random Forest Hyperparameter Search...")
print("-" * 65)

# 5. Loop through every combination of parameters
for n_t in param_grid['n_trees']:
    for m_depth in param_grid['max_depth']:
        for n_feat in param_grid['n_features']:

            # Initialize the model with current parameters
            rf = SimpleRandomForest0(n_trees=n_t, max_depth=m_depth, n_features=n_feat)

            # Train the model
            rf.fit(X_train, y_train)

            # Make predictions
            predictions = rf.predict(X_test)

            # Calculate accuracy
            accuracy = accuracy_score(y_test, predictions)

            # Print the results
            print(f"Trees: {n_t}, Depth: {m_depth}, Features: {n_feat} \t->\t Accuracy: {accuracy:.4f}")

            # Check if this is the best model so far
            if accuracy > best_accuracy:
                best_accuracy = accuracy
                best_params = {'n_trees': n_t, 'max_depth': m_depth, 'n_features': n_feat}

print("-" * 65)
print("Search complete.")
print(f"\nBest Accuracy Achieved: {best_accuracy:.4f}")
print(f"Best Parameters Found: {best_params}")

if best_params:
    print("\nRetraining the best model on the full training data and saving it...")

    # 1. Create a final model with the best parameters found
    final_model = SimpleRandomForest0(
        n_trees=best_params['n_trees'],
        max_depth=best_params['max_depth'],
        n_features=best_params['n_features']
    )

    # 2. Train it on the entire training set
    final_model.fit(X_train, y_train)

    # 3. Save the trained model to a file using pickle
    filename = 'best_random_forest.pkl'
    with open(filename, 'wb') as file:
        pickle.dump(final_model, file)

    print(f"Model saved successfully as '{filename}'")
else:
    print("\nNo best model to save.")

import pickle
import numpy as np

# --- You would need to have your SimpleRandomForest class definition in this script too ---

# 1. Load the model from the file
filename = 'best_random_forest.pkl'
with open(filename, 'rb') as file:
    loaded_model = pickle.load(file)

# 2. Prepare some new data for prediction (must have 4 features)
# Example: a single day's data [Open, High, Low, Close]
new_data = np.array([[160, 165, 159, 163]])

# 3. Use the loaded model to make a prediction
prediction = loaded_model.predict(new_data)

print(f"The loaded model predicts: {prediction[0]}")

